넥스트 13~14의 차이점
- 앱 라우터는 디렉터리 기능이 달라짐
1) 페이지 라우터에서 레이아웃 기능이 없었으나, 앱 라우터는 있음
2) 사용자별 권한 문제도 미들웨어로 지원함으로써 쉬워짐

- 리액트 18를 사용함으로써 서버 컴포넌트를 적극적으로 활용함
1) 넥스트 서버에서 미리 렌더링을 하여 완성된 HTML을 보내줄 수 있어 페이지 로딩 시간을 절감시킴
2) 용량도 줄어듦
3) 넥스트 서버의 부담이 생김 -> 캐시를 적극적으로 활용함 (데이터 캐싱)

- 넥스트는 리액트 위에 돌아가는 프레임 워크로 화면 그리기, 라우팅, 데이터 가져오기, 배포, 최적화와 같은 리액트만 했을 때 따로 추가해야 될 것으로
내부적으로 지원해줌

- 넥스트는 서버 기능도 제공해줌

- npx create-next-app@latest

- public 폴더는 next 서버에서 누구나 접근할 수 있게해 줌
1) 공개할 데이터 이미지 같은 것을 두면 됨

- src 폴더 없이 app 폴더가 밖에 있으나, src/app으로 두는 게 좋음
1) 다른 류의 자바스크립트/타입스크립트 파일이 들어갈 수 있으므로 src 폴더 내 넣는 게 좋음
2) app 폴더는 라우팅 혹은 주소 담당

- next.config.js는 넥스트에 대한 설정

- tsconfig.json는 타입스크립트 기본 설정 파일임

- 페이지를 넘나들어도 바뀌지 않는 부분은 레이아웃에 속함

- not-found.tsx 파일은 어느 라우팅에도 존재하지 않을 때, 접근하는 기본 페이지임

- 계층 구조는 layout.tsx -> 디렉토리 내 layout.tsx -> 디렉토리 내 page.tsx

- [] 디렉토리는 주소 창에서 값이 변하는 애들을 자동으로 매칭시켜주는 역할

- () 디렉토리는 주소 창에 관여하지 않으나, 그룹을 만들 수 있는 역할

- 처음 레이아웃 및 폴더 구조를 잘 구성하는 게 좋음

- 그룹핑 하는 기준이 레이아웃 -> 폴더별로 레이아웃 구성이 가능하므로

- 레이아웃은 페이지 변경되어도 유지되며 리렌더링이 발생되지 않음 -> 페이지만 리렌더링이 발생됨
1) 페이지 변경 시마다 레이아웃도 리렌더링이 되게 하려면 template.tsx를 사용 -> 페이지 넘나들 때마다 기록하는 경우, 예를 들면 구글 애널리틱스임 (리렌더링보다 새로 마운트됨)
2) 페이지 변경 시마다 레이아웃도 리렌더링이 안 되게 하려면 layout.tsx를 사용 -> 보통은 이 파일로 많이 만듦
3) 두 파일은 같은 경로에 둘 수 없으며, 단 하나만 존재해야 함

- 넥스트에서는 Link는 HTML의 a태그를 대체하며 반드시 Link를 사용해야 함
1) Link에 특수한 기능이 있기 때문에 사용 -> a 태그로 생성하면 페이지를 새로고침하면서 페이지 전환이 됨
2) 리액트나 넥스트에선 리렌더링 문제로 인해 새로고침이 발생되면 안 됨

- 넥스트에선 img 대신 Image를 사용하면 자동으로 이미지를 최적화해 줌
1) 공식 문서 내 Optimizing Images 항목 참조

- CSS 모듈로 하기 모듈을 많이 사용함
1) tailwind : 호불호 심하고 가독성 안 좋음
2) Styled Component or Emotion : Styled Component는 서버 컴포넌트에서 SSR 문제 존재, Emotion은 Next 13에서 잘 동작 안 됨
3) sass
4) css module : 간단하게 하기 위해 실습에서 이걸 사용 -> styles로 임포트 가능,
  = 다른 파일이랑 겹쳐도 page."module".css처럼 module이 들어가므로 겹치는 일이 없음, 이름이 동일해도 각 페이지별 클래스 이름을 구별해 줌
5) vanilla extract : windows와 문제가 존재, 다른 부분에선 문제점이 없음, 얘가 요즈음 핫함

- dvh, dvw는 모바일에서도 주소창 유무에 상관없이 전체화면을 채울 수 있음

- 패러렐 라우트나 인터셉트 라우터를 활용하면 페이지를 이동하지 않고, 주소만 변경할 수 있음

- 앱 라우터에선 폴더로 디렉토리 구조를 바꿀 수 있음

- 패러렐 라우터는 동시에 여러 페이지를 보여주는 라우트
1) 같은 폴더 내 page.tsx 파일이 존재해야지만, 페러렐 라우터가 동작됨
    -> (beforeLogin) 내 @modal/page.tsx와 page.tsx (O)
    -> (beforeLogin) 내 @modal/page.tsx와 app/page.tsx (X)
2) layout.tsx 파일도 같은 폴더 내에도 존재해야 됨
    -> 한 화면에서 두 페이지를 동시에 보여주므로 = 해당 파일은 app에서 (beforeLogin)으로 옮길 필요는 없음

- 타입스크립트는 변수, 매개변수, 리턴값에 타입을 지정하는 것임

- 넥스트 내 모든 컴포넌트는 기본적으로 전부 서버 컴포넌트임
1) page.tsx, layout.tsx 등의 파일은 전부 nextjs 서버에서 동작함
2) 리액트 18에서 추가된 기능임
3) 브라우저가 아닌 서버에서 동작함
4) 비동기이므로, async를 통한 비동기 처리 가능
5) use를 사용하는 훅스들을 사용할 수 없음
6) 서버 컴포넌트는 전부 데이터와 연관이 있음

- "use client" 키워드를 사용하면 서버 컴포넌트를 클라이언트 컴포넌트로 변경이 가능함
1) use strict를 본따서 만든 듯함

- default.tsx는 패러렐 라우트의 기본값으로, 페러렐 라우트를 사용할 필요가 없을 때 사용하는 기본 값 파일

- 인터셉팅 라우트는 서로 주소가 달라도 같은 화면에 뜰 수 있도록 만든 라우트
1) Link를 통한 상황에서는 인터셉팅 라우트로 인한 주소로 이동되나 새로 고침을 하면 기존 주소로 이동됨